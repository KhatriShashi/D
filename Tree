import java.util.*;

public class BinaryTrees {
    static class Node{
        int data;
        Node left;
        Node right;
        Node(int data){
            this.data=data;
            this.left=null;
            this.right=null;
        }
    }
    static  class BinarySearchTree{
        static int idx=-1;
        static Node buildtree(int[] node){
            idx++;
            if(node[idx]==-1){
                return null;
            }
            Node newNode=new Node(node[idx]);
            newNode.left=buildtree(node);
            newNode.right=buildtree(node);
            return newNode;
        }
        
        static void preorderTraversal(Node root){
            if(root==null){
                return;
            }
            System.out.print(root.data+" ");
            preorderTraversal(root.left);
            preorderTraversal(root.right);
        }
        
        static void inorderTraversal(Node root){
            if(root==null){
                return;
            }
            inorderTraversal(root.left);
            System.out.print(root.data+" ");
            inorderTraversal(root.right);
        }
        
        static void postorderTraversal(Node root){
            if(root==null){
                return;
            }
            postorderTraversal(root.left);
            postorderTraversal(root.right);
            System.out.print(root.data+" ");
        }
        
        static void levelOrderTraversal(Node root){
            if(root==null){
                return;
            }
            Queue<Node> q=new LinkedList<>();
            q.add(root);
            q.add(null);
            while (!q.isEmpty()){
                Node currNode=q.remove();
                if(currNode==null){
                    System.out.println();
                    if(q.isEmpty()){
                        break;
                    }else{
                        q.add(null);
                    }
                }else {
                    System.out.print(currNode.data+" ");
                    if(currNode.left!=null){
                        q.add(currNode.left);
                    }
                    if(currNode.right!=null){
                        q.add(currNode.right);
                    }
                }
            }
        }
    }
    public static void main(String[] args) {
        int[] node={1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};
        BinarySearchTree obj=new BinarySearchTree();
        Node root=obj.buildtree(node);
        System.out.println(root.data);
        obj.preorderTraversal(root);
        System.out.println();
        obj.postorderTraversal(root);
        System.out.println();
        obj.levelOrderTraversal(root);
    }
}
